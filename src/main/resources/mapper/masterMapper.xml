<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ict.finalproject.DAO.MasterDAO">

    <!-- 관리자 페이지 공지사항 등록 -->
    <insert id="insertNotice" parameterType="com.ict.finalproject.vo.MasterVO">
        INSERT INTO t_notice (title, content, adminidx)
        VALUES (#{title}, #{content}, 2)
    </insert>

    <!-- 관리자페이지 자주묻는 질문 등록 -->
    <insert id="insertFAQ" parameterType="com.ict.finalproject.vo.MasterVO">
        insert into t_faq (question,answer,faqtype,adminidx) values(#{question}, #{answer}, #{faqtype} , #{adminidx})
    </insert>

    <!-- 관리자 페이지 굿즈 상품 등록 -->
    <insert id="createStore" parameterType="MasterVO" useGeneratedKeys="true" keyProperty="idx">
        INSERT INTO t_product (category, title, price, thumImg, ani_title, relDT, brand, pro_detail, fee, stock, second_category, adminidx)
        VALUES (#{category}, #{title}, #{price}, #{thumImg}, #{ani_title}, #{relDT}, #{brand}, #{pro_detail}, #{fee}, #{stock}, #{second_category}, #{adminidx})
    </insert>

    <!-- 관리자페이지 자주묻는 질문 리스트 -->
    <select id="getFAQList" resultType="com.ict.finalproject.vo.MasterVO">
        select f.idx, f.question, ft.type as faqtype, DATE_FORMAT(f.regDT, '%Y-%m-%d') as regDT
        from t_faq f join t_faqtype ft ON f.faqtype = ft.code ORDER BY f.idx ASC;
    </select>

    <!-- 관리자 페이지 굿즈 상품 테이블 전체 목록 조회 -->
    <select id="getStoreList" resultType="com.ict.finalproject.vo.MasterVO">
        SELECT
        p.idx,
        p.title,
        p.price,
        p.stock,
        DATE_FORMAT(p.relDT, '%Y-%m-%d') as relDT,
        f.type AS category
        FROM
        t_product p
        LEFT JOIN
        t_firstcategory f ON p.category = f.code
        ORDER BY
        p.idx
    </select>

    <!-- 관리자페이지 굿즈 상품 총 상품수 구하기 -->
    <select id="getTotalStore">
        select count(*) from t_product
    </select>

    <!-- 관리자페이지 굿즈 상품테이블 카테고리별 카운트 구하기 -->
    <select id="getCategoryCountByCode" resultType="map" parameterType="int">
        SELECT  tf.code AS category_code,  tf.type AS category_type,  COUNT(p.category) AS product_category
        FROM t_firstcategory tf LEFT JOIN t_product p ON p.category = tf.code
        WHERE tf.code = #{categoryCode} GROUP BY tf.code, tf.type
    </select>

    <!-- 커뮤니티 테이블 모든 목록 불러오기 -->
    <select id="getBoardList" resultType="MasterVO">
        SELECT c.idx, tc.type AS category, c.title, u.userid AS author, DATE_FORMAT(c.regDT, '%Y-%m-%d') as regDT, c.hit, c.commtype
        FROM t_community c LEFT JOIN t_communitytype tc ON c.commtype = tc.code
        LEFT JOIN t_user u ON c.useridx = u.idx ORDER BY c.idx
    </select>

    <!-- 애니 전체 리스트 불러오기 -->
    <select id="getAniAllList" resultType="MasterVO">
        select a.idx, a.title, a.anitype, at.type as anitype_type, a.agetype, ag.type as age_type, a.director, a.outline, DATE_FORMAT(a.regDT, '%Y-%m-%d') as regDT
        from t_animation a left join t_anitype at on a.anitype = at.code
        left join t_agetype ag on a.agetype = ag.code
    </select>

    <!-- 해당 어드민의 idx 구하기 -->
    <select id="getAdminIdxByAdminid" resultType="int">
        SELECT idx
        FROM t_admin
        WHERE adminid = #{adminid}
    </select>

    <!-- 관리자페이지 공지사항 목록 불러오기  -->
    <select id="getNoticeList">
        SELECT n.idx, n.title, n.content, DATE_FORMAT(n.regDT, '%Y-%m-%d') as regDT, u.username AS admin_name, DATE_FORMAT(n.modifyDT, '%Y-%m-%d') as modifyDT
        FROM t_notice n
        JOIN t_user u ON n.adminidx = u.idx
    </select>

    <!-- 모든 리뷰 불러오기 -->
    <select id="getReplyList">
        SELECT r.idx, u.userid, r.content, r.grade, DATE_FORMAT(r.regDT, '%Y-%m-%d') as regDT
        FROM t_review r JOIN t_user u ON r.useridx = u.idx
    </select>

    <!-- idx에 대한 리뷰 상세보기  -->
    <select id="getReviewDetail" resultType="MasterVO" parameterType="int">
        select r.idx, r.content, r.grade, u.userid,
        DATE_FORMAT(r.regDT, '%Y-%m-%d') as regDT,
        r.imgfile1, r.imgfile2, ol.order_idx
        from t_review r
        left join t_user u ON r.useridx = u.idx
        left join t_orderlist ol ON r.orderList_idx = ol.idx
        where r.idx = #{idx}
    </select>

    <!-- 신고 추가 -->
    <insert id="insertReport">
        INSERT INTO t_ban (useridx, reason, stopDT, endDT, comment_idx, review_idx, comunity_idx)
        VALUES (
        CASE
        WHEN #{comment_idx} IS NOT NULL THEN (SELECT useridx FROM t_comment WHERE idx = #{comment_idx})
        WHEN #{review_idx} IS NOT NULL THEN (SELECT useridx FROM t_review WHERE idx = #{review_idx})
        WHEN #{comunity_idx} IS NOT NULL THEN (SELECT useridx FROM t_community WHERE idx = #{comunity_idx})
        ELSE NULL
        END,
        #{reason}, #{stopDT}, #{endDT}, #{comment_idx}, #{review_idx}, #{comunity_idx}
        )
    </insert>

    <select id="findUserIdByCommentIdx" resultType="Integer">
        SELECT useridx
        FROM t_comment
        WHERE idx = #{idx}
    </select>
    <select id="findUserIdByReviewIdx" resultType="Integer">
        SELECT useridx
        FROM t_review
        WHERE idx = #{idx}
    </select>
    <select id="findUserIdByCommunityIdx" resultType="Integer">
        SELECT useridx
        FROM t_community
        WHERE idx = #{idx}
    </select>

    <!-- 같은 useridx에 대한 모든 endDT 업데이트 -->
    <update id="updateAllEndDT">
        UPDATE t_ban
        SET endDT = #{endDT}
        WHERE useridx = #{useridx}
    </update>

    <!-- 신고 기능 목록 보여주기 -->
    <select id="getReportinguserList" parameterType="map" resultType="MasterVO">
        SELECT
        r.*,
        c.*,
        v.*,
        co.*,
        u.userid AS commentAuthor,  -- 댓글 작성자의 ID
        u2.userid AS reviewAuthor,   -- 리뷰 작성자의 ID
        u3.userid AS communityAuthor  -- 커뮤니티 작성자의 ID
        FROM
        t_report r
        LEFT JOIN
        t_comment c ON r.comment_idx = c.idx  -- 댓글과 조인
        LEFT JOIN
        t_review v ON r.review_idx = v.idx    -- 리뷰와 조인
        LEFT JOIN
        t_community co ON r.comunity_idx = co.idx -- 커뮤니티와 조인
        LEFT JOIN
        t_user u ON c.useridx = u.idx        -- 댓글 작성자의 ID 조인
        LEFT JOIN
        t_user u2 ON v.useridx = u2.idx      -- 리뷰 작성자의 ID 조인
        LEFT JOIN
        t_user u3 ON co.useridx = u3.idx     -- 커뮤니티 작성자의 ID 조인
    </select>





    <!-- 신고 테이블에 아이디 있는지 체크 -->
    <select id="isUserBanned" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM t_ban b
        JOIN t_user u ON u.idx = b.useridx
        WHERE u.userid = #{userid}
        AND NOW() BETWEEN b.stopDT AND b.endDT
    </select>

    <!-- 탈퇴 테이블에 아이디 있는지 체크 -->
    <select id="isUserDeleted" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM t_user u
        JOIN t_userDel ud ON u.idx = ud.useridx
        WHERE u.idx = #{idx}
    </select>

    <!-- 유저테이블에서 실제로 회원인지 아닌지 조회 -->
    <select id="findUserIdxByUserid" resultType="int">
        SELECT idx
        FROM t_user
        WHERE userid = #{userid}
    </select>

    <!-- 모든 댓글 불러오기 -->
    <select id="getReviewList" resultType="MasterVO">
        SELECT idx, comm_idx, content, useridx, DATE_FORMAT(regDT, '%Y-%m-%d') as regDT
        FROM t_comment
        WHERE parentidx IS NULL OR parentidx = 0
    </select>

    <!-- 탈퇴 회원 목록 보여주기 -->
    <select id="getMemberDelList" resultType="MasterVO">
        SELECT d.idx, t.userid, d.delReasonDetail, DATE_FORMAT(d.inDate, '%Y-%m-%d') as inDate
        FROM t_userDel d JOIN t_user t ON d.useridx = t.idx
    </select>

    <!-- idx의 해당하는 ani 값 불러오기 -->
    <select id="aniSelect" resultType="com.ict.finalproject.vo.MasterVO">
        select idx, title, director, outline from t_animation where idx = #{idx}
    </select>

    <!-- 애니 수정 -->
    <update id="updateAnimation" parameterType="MasterVO">
        update t_animation set post_img = #{post_img_filename}, title = #{title}, anitype = #{anitype}, director = #{director},
        agetype = #{agetype}, outline = #{outline}, modifyState = 1, modifyDT = now(), adminidx = #{adminidx} where idx= #{idx}
    </update>

    <!-- 애니 idx 값에 기존에 있던 이미지 파일 불러오기 -->
    <select id="getCurrentImgFile" resultType="String">
        SELECT post_img
        FROM t_animation
        WHERE idx = #{idx}
    </select>

    <!-- 신고 테이블에서 신고가 완료 되었을 때 처리 상태 및 처리날짜 업데이트  -->
    <update id="updateReport">
        UPDATE t_report
        SET handleState = #{handleState},
        handleDT = #{handleDT}
        WHERE idx = #{idx}
        AND handleState != 2
    </update>

    <!-- 관리자 ID로 idx 조회 -->
    <select id="findAdminIdxByAdminid" parameterType="String" resultType="Integer">
        SELECT idx
        FROM t_admin
        WHERE adminid = #{adminid}
    </select>



    <!-- 관리자 로그인 정보 확인 -->
    <select id="adminLogin" parameterType="map" resultType="MasterVO">
        SELECT *
        FROM t_admin
        WHERE adminid = #{adminid}
    </select>

    <select id="findAdminIdxByUserid" resultType="int" parameterType="string">
        SELECT idx
        FROM t_admin
        WHERE adminid = #{adminid}
    </select>


    <!-- 문의사항 전체 목록 보여주기 -->
    <select id="getQNAList" resultType="MasterVO">
        SELECT q.idx, qt.type AS qnatype, q.title, q.content, u.userid, DATE_FORMAT(q.regDT, '%Y-%m-%d') as regDT,
        q.handleState, r.reply AS reply, q.imgfile1 as attachmentUrl FROM t_qna q
        JOIN t_qnatype qt ON q.qnatype = qt.code
        JOIN t_user u ON q.useridx = u.idx
        LEFT JOIN t_reply r ON q.idx = r.qna_idx
    </select>

    <!-- 문의 안한 실시간 갯수 카운팅 -->
    <select id="getUnansweredQnaCount">
        select count(*) from t_qna where handleState = 0
    </select>

    <!-- 신고 목록 보여주기 -->
    <select id="getReportingUser">
        SELECT
        b.useridx AS bannedUserIdx,
        u.userid AS bannedUserId,
        COUNT(*) AS report_count,  -- 신고 횟수
        MAX(b.endDT) AS endDT,  -- 가장 최신의 endDT
        MAX(r.report_type) AS report_type,
        DATE_FORMAT(b.stopDT, '%Y-%m-%d') AS stopDT,
        b.reason
        FROM t_ban b
        LEFT JOIN t_report r ON b.useridx = r.useridx
        LEFT JOIN t_user u ON b.useridx = u.idx
        GROUP BY b.useridx, u.userid
        ORDER BY b.endDT DESC
    </select>



    <!-- 특정 유저의 신고 횟수를 구하는 쿼리 -->
    <select id="getTotalUserReport" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM t_ban WHERE useridx = #{useridx}
    </select>

    <!-- 전체 신고 횟수를 구하는 쿼리 -->
    <select id="getTotalReportCount" resultType="int">
        SELECT COUNT(*) FROM t_report
    </select>

    <!-- qna 처리 상태 업데이트 -->
    <update id="updateHandleState">
        UPDATE t_qna SET handleState = 1 WHERE idx = #{idx}
    </update>

    <!-- t_reply 테이블에 답변 추가 -->
    <insert id="insertReply">
        INSERT INTO t_reply (qna_idx, reply, adminidx, regDT)
        VALUES (#{idx}, #{reply}, #{adminIdx}, #{regDT})
    </insert>

    <update id="updateEndDT">
        UPDATE t_ban
        SET endDT = #{endDT}
        WHERE useridx = #{userid}
    </update>

    <!-- 애니 데이터 베이스 생성 -->
    <insert id="insertAnimation" parameterType="com.ict.finalproject.vo.MasterVO">
        INSERT INTO t_animation (post_img, title, anitype, director, agetype, outline, regDT, adminidx)
        VALUES (#{post_img_filename}, #{title}, #{anitype}, #{director}, #{agetype}, #{outline}, now(), #{adminidx})
    </insert>

    <!-- 해당 idx의 값의 데이터 삭제 -->
    <delete id="deletePostByIdx" parameterType="int">
        DELETE FROM t_animation WHERE idx = #{idx}
    </delete>

    <!-- 상품 정보를 idx로 조회 -->
    <select id="getStoreByIdx" resultType="MasterVO">
        SELECT * FROM t_product WHERE idx = #{idx}
    </select>

    <!-- 상품 정보를 수정 -->
    <update id="updateStore">
        UPDATE t_product SET category = #{category}, title = #{title}, price = #{price}, thumImg = #{thumImg},
        ani_title = #{ani_title}, relDT = #{relDT}, brand = #{brand}, pro_detail = #{pro_detail}, fee = #{fee},
        stock = #{stock}, second_category = #{second_category}, adminidx = #{adminidx}, modifyState = 1, modifyDT = now() WHERE idx = #{idx}
    </update>

    <select id="findSubCategoriesByCategory" resultType="MasterVO">
        SELECT code, first_code, type
        FROM t_secondcategory
        WHERE code = #{code}
    </select>

    <!-- t_productimg 테이블에 이미지 삽입 -->
    <insert id="insertProductImg" parameterType="MasterVO">
        INSERT INTO t_productimg (pro_idx, detailImg)
        VALUES (#{pro_idx}, #{detailImg})
    </insert>

    <!-- 해당 idx의 값 공지사항 조회 -->
    <select id="getNoticeById" resultType="MasterVO">
        SELECT idx, title, content, DATE_FORMAT(regDT, '%Y-%m-%d') as regDT
        FROM t_notice
        WHERE idx = #{idx}
    </select>

    <!-- 공지사항 업데이트 -->
    <update id="updateNotice">
        UPDATE t_notice
        SET title = #{title},
        content = #{content},
        modifyState = 1,
        modifyDT = now(),
        adminidx = #{adminidx}
        WHERE idx = #{idx}
    </update>

    <!-- idx의 해당하는 공지사항 값 불러오기 -->
    <select id="noticeSelect" resultType="com.ict.finalproject.vo.MasterVO">
        select idx, title, content from t_notice where idx = #{idx}
    </select>

    <!-- 답변 내용 확인하기 -->
    <select id="getQnaById" resultType="com.ict.finalproject.vo.MasterVO">
        SELECT q.idx, q.content AS content, r.reply AS reply
        FROM t_qna q LEFT JOIN
        t_reply r ON q.idx = r.qna_idx WHERE q.idx = #{idx}
    </select>

    <select id="getAdminByAdminId" resultType="com.ict.finalproject.vo.MasterVO">
        SELECT *
        FROM t_admin
        WHERE adminid = #{adminid}
    </select>

    <select id="doesProductExist" parameterType="int" resultType="int">
        SELECT COUNT(1) FROM t_product WHERE idx = #{pro_idx}
    </select>

    <!-- 기존 제품 이미지 조회 -->
    <select id="getProductImgByIdx" parameterType="int" resultType="MasterVO">
        SELECT * FROM t_productimg WHERE pro_idx = #{idx}
    </select>

    <!-- 제품 이미지 업데이트 -->
    <update id="updateProductImg" parameterType="MasterVO">
        UPDATE t_productimg
        SET detailImg = #{detailImg}
        WHERE pro_idx = #{pro_idx}
    </update>

    <!-- 총 애니메이션 수를 가져오는 쿼리 -->
    <select id="getTotalAnimeCount" resultType="int">
        SELECT COUNT(*) FROM t_animation
    </select>

    <!-- 페이징된 애니메이션 리스트를 가져오는 쿼리 -->
    <select id="getAniListWithPaging" parameterType="map" resultType="MasterVO">
        SELECT *, DATE_FORMAT(regDT, '%Y-%m-%d') as regDT FROM t_animation
        ORDER BY idx DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="getStoreListWithPaging" resultType="MasterVO">
        SELECT *, DATE_FORMAT(relDT, '%Y-%m-%d') as relDT FROM t_product
        ORDER BY idx DESC
        LIMIT #{offset}, #{limit}
    </select>

    <delete id="deleteBoard" parameterType="int">
        DELETE FROM t_community WHERE idx = #{idx}
    </delete>

    <delete id="deleteFaq" parameterType="int">
        DELETE FROM t_faq WHERE idx = #{idx}
    </delete>

    <!-- 총 탈퇴 회원 수 조회 -->
    <select id="getTotalUserDelCount" resultType="int">
        SELECT COUNT(*) FROM t_user WHERE delState = 1
    </select>

    <!-- 이벤트 삭제 -->
    <delete id="deleteEvent">
        DELETE FROM t_event WHERE idx = #{idx}
    </delete>

    <select id="getBoardListWithPaging" parameterType="map" resultType="MasterVO">
        SELECT c.idx, tc.type AS category, c.title, u.userid AS author,
        DATE_FORMAT(c.regDT, '%Y-%m-%d') as regDT, c.hit, c.commtype
        FROM t_community c
        LEFT JOIN t_communitytype tc ON c.commtype = tc.code
        LEFT JOIN t_user u ON c.useridx = u.idx
        WHERE c.delState != 1  <!-- delState가 1이 아닌 경우만 조회 -->
        ORDER BY c.regDT DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 전체 게시글 수 조회 -->
    <select id="getTotalBoardCount" resultType="int">
        SELECT COUNT(*) FROM t_community
    </select>

    <!-- 페이징을 적용한 리뷰 목록 조회 -->
    <select id="getReviewListWithPaging" parameterType="map" resultType="MasterVO">
        SELECT r.*, u.userid, DATE_FORMAT(r.regDT, '%Y-%m-%d') as regDT, r.grade
        FROM t_review r
        LEFT JOIN t_user u ON r.useridx = u.idx
        ORDER BY r.idx DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 전체 리뷰 개수 조회 -->
    <select id="getTotalReviewCount" resultType="int">
        SELECT COUNT(*) FROM t_review
    </select>

    <!-- 이벤트 추가 쿼리 -->
    <insert id="insertEvent">
        insert into t_event (title, thumfile, content, event_date, adminidx)
        values (#{title}, #{thumfile}, #{content}, #{event_date}, #{adminidx})
    </insert>

    <!-- 이벤트 목록 불러오기 -->
    <select id="getEventList">
        select idx, title, DATE_FORMAT(event_date, '%Y-%m-%d') as event_date, DATE_FORMAT(regDT, '%Y-%m-%d') as regDT from t_event
    </select>

    <!-- 이벤트 해당 idx로 모달창 내용 띄우기 -->
    <select id="getEventDetail" parameterType="int" resultType="MasterVO">
        SELECT idx, title, content, DATE_FORMAT(event_date, '%Y-%m-%d') as event_date, DATE_FORMAT(regDT, '%Y-%m-%d') as regDT
        FROM t_event
        WHERE idx = #{idx}
    </select>

    <!-- 이벤트 페이지 업데이트 -->
    <update id="updateEvent" parameterType="MasterVO">
        update t_event set title = #{title}, thumfile = #{thumfile}, content = #{content}, event_date = #{event_date}, modifyState = 1, modifyDT = now() where idx = #{idx}
    </update>

    <!-- 해당 이벤트 idx 조회하는 쿼리 -->
    <select id="getEventByIdx" parameterType="int" resultType="com.ict.finalproject.vo.MasterVO">
        SELECT idx, title, content, DATE_FORMAT(event_date, '%Y-%m-%d') as event_date, thumfile
        FROM t_event
        WHERE idx = #{idx}
    </select>

    <!-- 날짜별 회원 가입 수를 가져오는 쿼리 -->
    <select id="getUserRegistrationStats" resultType="map">
        SELECT DATE_FORMAT(regDT, '%Y-%m-%d') AS date, COUNT(*) AS count
        FROM t_user
        GROUP BY DATE_FORMAT(regDT, '%Y-%m-%d')
        ORDER BY DATE_FORMAT(regDT, '%Y-%m-%d')
    </select>

    <!-- 굿즈 상품 idx 해당 하는 데이터 삭제 -->
    <delete id="deleteStoreByIdx" parameterType="int">
        DELETE FROM t_product WHERE idx = #{idx}
    </delete>

    <delete id="deleteProductImagesByProductIdx" parameterType="int">
        DELETE FROM t_productimg WHERE pro_idx = #{pro_idx}
    </delete>

    <!-- 페이징을 적용한 신고된 유저 목록 조회 -->
    <select id="getReportingUserWithPaging" parameterType="map" resultType="MasterVO">
        SELECT DISTINCT
        u.userid AS commentAuthor,          -- 댓글 작성자의 ID
        u2.userid AS reviewAuthor,          -- 리뷰 작성자의 ID
        u3.userid AS communityAuthor,       -- 커뮤니티 작성자의 ID
        b.idx,                              -- 인덱스
        COUNT(b.idx) AS report_count,      -- 신고 건수
        r.handleState AS handleState,      -- 신고 처리 상태
        b.stopDT,                          -- 제재 시작 날짜
        b.endDT,                           -- 제재 종료 날짜
        DATE_FORMAT(r.handleDT, '%Y-%m-%d') AS handleDT, -- 처리 날짜
        b.comment_idx AS comment_idx,      -- 댓글 인덱스
        b.comunity_idx AS comunity_idx,    -- 커뮤니티 인덱스
        b.review_idx AS review_idx,        -- 리뷰 인덱스
        b.reason AS reason,                -- 신고 사유
        IFNULL(r.report_type, '알 수 없음') AS report_type -- 신고 유형
        FROM
        t_ban b
        LEFT JOIN
        t_comment c ON b.comment_idx = c.idx
        LEFT JOIN
        t_review rv ON b.review_idx = rv.idx
        LEFT JOIN
        t_community co ON b.comunity_idx = co.idx
        LEFT JOIN
        t_user u ON b.useridx = u.idx
        LEFT JOIN
        t_user u2 ON rv.useridx = u2.idx  -- 리뷰 작성자의 ID 조인
        LEFT JOIN
        t_user u3 ON co.useridx = u3.idx
        LEFT JOIN
        t_report r ON b.useridx = u.idx
        WHERE
        r.handleState != 0                  -- 처리 상태가 0이 아닌 경우
        GROUP BY
        u.userid, u2.userid, u3.userid, r.handleState, b.stopDT, b.endDT, r.handleDT, b.comment_idx, b.comunity_idx, b.review_idx, b.reason, b.idx,r.report_type
        ORDER BY
        b.idx                              -- 인덱스 기준 정렬
        LIMIT #{offset}, #{pageSize}           -- 페이징 처리
    </select>

    <!-- 애니메이션 매출 데이터 조회 -->
    <select id="getAniSalesData" resultType="map">
        SELECT
        p.ani_title AS aniTitle,
        SUM((ol.amount - IFNULL(ol.cancelCount, 0)) * p.price) AS totalSales
        FROM
        T_payment pm
        JOIN
        T_order o ON pm.order_idx = o.idx
        JOIN
        T_orderList ol ON o.idx = ol.order_idx
        JOIN
        T_product p ON ol.pro_idx = p.idx
        LEFT JOIN
        (SELECT payment_id, SUM(cancelAmount) AS totalCancelAmount
        FROM T_payment_cancel
        GROUP BY payment_id) c ON pm.payment_id = c.payment_id
        WHERE
        pm.successYN = 1
        AND o.payState = 1
        GROUP BY
        p.ani_title
        ORDER BY
        totalSales DESC
    </select>


    <select id="getTodayBoardCount" resultType="int">
        SELECT COUNT(*) FROM t_community WHERE DATE(regDT) = CURDATE()
    </select>

    <select id="getLastWeekBoardCount" resultType="int">
        SELECT COUNT(*) FROM t_community WHERE regDT >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
    </select>

    <!-- 일별 매출 데이터 조회 -->
    <select id="getDailySalesData" resultType="map">
        SELECT
        date_table.date AS orderDate,
        IFNULL(SUM(pm.amount) - SUM(IFNULL(pmc.totalCancelAmount, 0)), 0) AS totalSales
        FROM
        (SELECT
        DATE_SUB(CURDATE(), INTERVAL (WEEKDAY(CURDATE()) - idx) DAY) AS date
        FROM
        (SELECT 0 AS idx UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3
        UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6) AS idx_table
        ) AS date_table
        LEFT JOIN
        T_payment pm ON DATE(pm.createDT) = date_table.date
        LEFT JOIN
        T_order o ON pm.order_idx = o.idx
        LEFT JOIN
        (SELECT payment_id, SUM(cancelAmount) AS totalCancelAmount
        FROM T_payment_cancel
        GROUP BY payment_id) pmc ON pm.payment_id = pmc.payment_id
        WHERE
        (pm.payment_id IS NULL OR (pm.successYN = 1 AND o.payState = 1))
        GROUP BY
        date_table.date
        ORDER BY
        date_table.date
    </select>


    <select id="getTotalUsers" resultType="int">
        SELECT COUNT(*) FROM t_user; <!-- 총 회원 수 -->
    </select>

    <select id="getTotalOrders" resultType="int">
        SELECT COUNT(*) FROM t_order; <!-- 총 주문 수 -->
    </select>

    <select id="getTotalRevenue" resultType="double">
        SELECT SUM(total_price) FROM t_order; <!-- 총 매출액 -->
    </select>



    <!-- 전체 신고된 유저의 수 조회 -->
    <select id="getTotalReportingUserCount" resultType="int">
        SELECT COUNT(DISTINCT b.useridx) FROM t_ban b
    </select>

    <!-- 페이징을 적용한 댓글 목록 조회 -->
    <select id="getReplyListWithPaging" parameterType="map" resultType="MasterVO">
        SELECT r.idx, u.userid, r.content, DATE_FORMAT(r.regDT, '%Y-%m-%d') AS regDT
        FROM t_comment r
        JOIN t_user u ON r.useridx = u.idx
        WHERE r.parentidx IS NULL OR r.parentidx = 0
        ORDER BY r.regDT desc
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 전체 댓글 개수 조회 -->
    <select id="getTotalReplyCount" resultType="int">
        SELECT COUNT(*) FROM t_comment
    </select>

    <!-- 댓글 정보 조회 -->
    <select id="getCommentByIdx" resultType="MasterVO">
        SELECT idx,comm_idx, content, useridx as userid, DATE_FORMAT(regDT, '%Y-%m-%d') AS regDT
        FROM t_comment
        WHERE idx = #{idx}
    </select>

    <!-- 답글 목록 조회 -->
    <select id="getRepliesByCommentIdx" parameterType="int" resultType="MasterVO">
        SELECT r.idx, u.userid, r.content, DATE_FORMAT(r.regDT, '%Y-%m-%d') AS regDT
        FROM t_comment r
        JOIN t_user u ON r.useridx = u.idx
        WHERE r.parentidx = #{idx}
        ORDER BY r.idx
    </select>

    <select id="findAdminByAdminid" parameterType="String" resultType="MasterVO">
        SELECT * FROM t_admin
        WHERE adminid = #{adminid}
    </select>

    <select id="getUserListWithPaging" resultType="MasterVO">
        SELECT *
        FROM t_user
        ORDER BY regDT DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <!-- idx로 FAQ 정보 가져오기 -->
    <select id="getFAQById" parameterType="int" resultType="com.ict.finalproject.vo.MasterVO">
        SELECT * FROM t_faq WHERE idx = #{idx}
    </select>

    <!-- FAQ 정보 수정 -->
    <update id="updateFAQ" parameterType="MasterVO">
        UPDATE t_faq
        SET question = #{question}, answer = #{answer}, faqtype = #{faqtype}, modifyDT = NOW(), adminidx = #{adminidx}
        WHERE idx = #{idx}
    </update>

    <delete id="deleteNotice" parameterType="int">
        DELETE FROM t_notice WHERE idx = #{idx}
    </delete>

    <!-- 해당 신고 삭제 하기 -->
    <delete id="deleteReport" parameterType="int">
        DELETE FROM t_ban WHERE idx = #{idx}
    </delete>

    <delete id="deleteReport1" parameterType="int">
        DELETE FROM t_report WHERE idx = #{idx}
    </delete>

    <!-- 전체 FAQ 개수 조회 쿼리 -->
    <select id="getTotalFAQCount" resultType="int">
        SELECT COUNT(*) FROM t_faq
    </select>


    <select id="getLatestActivities" resultType="MasterVO">
        SELECT
        q.idx,
        q.title,
        q.content,
        q.regDT,
        q.handleState,
        q.useridx,
        qt.type AS qnatype,
        u.userid AS userid <!-- 사용자 이름을 가져옴 -->
        FROM
        t_qna q
        JOIN
        t_qnatype qt ON q.qnatype = qt.code
        JOIN
        t_user u ON q.useridx = u.idx  <!-- 사용자 ID로 조인 -->
        ORDER BY
        q.regDT DESC
        LIMIT 2
    </select>

    <select id="getRecentOrders" resultType="MasterVO">
        SELECT
        o.idx AS orderId,
        o.recipient AS customerName,
        p.ordername AS productName, -- t_payment의 ordername을 상품명으로 사용
        o.total_price AS paymentAmount,
        CASE
        WHEN ol.orderState = 1 THEN '결제 완료'
        WHEN ol.orderState = 2 THEN '상품 준비 중'
        WHEN ol.orderState = 3 THEN '배송 준비 중'
        WHEN ol.orderState = 4 THEN '배송 중'
        WHEN ol.orderState = 5 THEN '배송 완료'
        WHEN ol.orderState = 6 THEN '구매 확정'
        WHEN ol.orderState = 7 THEN '전체 취소 완료'
        WHEN ol.orderState = 8 THEN '부분 취소 완료 '
        WHEN ol.orderState = 9 THEN '교환 접수 완료'
        WHEN ol.orderState = 10 THEN '교환 처리중'
        WHEN ol.orderState = 11 THEN '교환 처리 완료'
        WHEN ol.orderState = 12 THEN '환불 접수 완료'
        WHEN ol.orderState = 13 THEN '환불 처리증'
        WHEN ol.orderState = 14 THEN '환불 처리완료'
        ELSE '알 수 없음'
        END AS orderState,
        o.regDT AS orderDate
        FROM
        t_order o
        LEFT JOIN t_payment p ON o.idx = p.order_idx
        LEFT JOIN t_orderlist ol ON o.idx = ol.order_idx
        ORDER BY
        o.regDT DESC
        LIMIT 2
    </select>

    <!-- 전체 이벤트 개수 조회 -->
    <select id="getTotalEventCount" resultType="int">
        SELECT COUNT(*) FROM t_event; <!-- Adjust the table name as needed -->
    </select>

    <!-- 페이징된 이벤트 목록 조회 -->
    <select id="getEventListByPage" parameterType="map" resultType="MasterVO">
        SELECT
        *,
        DATE_FORMAT(regDT, '%Y-%m-%d') AS regDT  -- regDT를 원하는 형식으로 포맷
        FROM
        t_event
        ORDER BY
        idx DESC  -- 내림차순 정렬
        LIMIT #{startRecord}, #{pageSize}
    </select>

    <!-- 특정 범위의 FAQ 목록 조회 쿼리 -->
    <select id="getFAQListByPage" parameterType="map" resultType="MasterVO">
        SELECT *
        FROM t_faq
        ORDER BY regDT DESC
        LIMIT #{startRecord}, #{pageSize}
    </select>

    <select id="getTodayReplyCount" resultType="int">
        SELECT COUNT(*) FROM t_comment WHERE DATE(regDT) = CURDATE();
    </select>

    <select id="getTodayReviewCount" resultType="int">
        SELECT COUNT(*) FROM t_review WHERE DATE(regDT) = CURDATE();
    </select>

    <delete id="deleteReview">
        DELETE FROM t_review WHERE idx = #{idx}
    </delete>

    <delete id="deleteReply">
        DELETE FROM t_comment WHERE idx = #{idx}
    </delete>

    <delete id="deleteComment">
        DELETE FROM t_report WHERE comment_idx  = #{idx}
    </delete>

    <select id="getWeekReviewCount" resultType="int">
        SELECT COUNT(*) FROM t_review WHERE regDT >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);
    </select>

    <select id="getReportinguserListWithPaging" parameterType="map" resultType="MasterVO">
        SELECT
        r.*,
        c.*,
        v.*,
        co.*,
        u.userid AS commentAuthor,  -- 댓글 작성자의 ID
        u2.userid AS reviewAuthor,   -- 리뷰 작성자의 ID
        u3.userid AS communityAuthor, -- 커뮤니티 작성자의 ID
        DATE_FORMAT(r.handleDT, '%Y-%m-%d') AS handleDT  -- 포맷팅된 handleDT
        FROM
        t_report r
        LEFT JOIN
        t_comment c ON r.comment_idx = c.idx  -- 댓글과 조인
        LEFT JOIN
        t_review v ON r.review_idx = v.idx    -- 리뷰와 조인
        LEFT JOIN
        t_community co ON r.comunity_idx = co.idx -- 커뮤니티와 조인
        LEFT JOIN
        t_user u ON c.useridx = u.idx        -- 댓글 작성자의 ID 조인
        LEFT JOIN
        t_user u2 ON v.useridx = u2.idx      -- 리뷰 작성자의 ID 조인
        LEFT JOIN
        t_user u3 ON co.useridx = u3.idx     -- 커뮤니티 작성자의 ID 조인
        ORDER BY
        r.reportDT DESC
        LIMIT
        #{offset}, #{pageSize}

    </select>

    <select id="getActiveReportCount" resultType="int">
        SELECT COUNT(*) FROM t_report WHERE handleState = 0
    </select>

    <select id="getInactiveReportCount" resultType="int">
        SELECT COUNT(*) FROM t_report WHERE handleState = 0
    </select>

    <select id="getCompletedReportCount" resultType="int">
        SELECT COUNT(*) FROM t_report WHERE handleState = 1
    </select>

    <select id="getNonCompletedReportCount" resultType="int">
        SELECT COUNT(*) FROM t_report WHERE handleState = 2
    </select>

    <select id="getWeekReplyCount" resultType="int">
        SELECT COUNT(*) FROM t_comment WHERE regDT >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);
    </select>

    <select id="getCategoryCodeCountByani" resultType="map" parameterType="int">
        SELECT
        at.code AS anitype_code,
        at.type AS anitype_name,
        COUNT(a.anitype) AS animation_count
        FROM
        t_animation a
        JOIN
        t_anitype at ON a.anitype = at.code
        WHERE
        at.code = #{code}  <!-- 특정 code로 제한 -->
        GROUP BY
        at.code, at.type
    </select>

    <select id="getSalesStatistics" parameterType="map" resultType="MasterVO">
        SELECT
        <choose>
            <when test="groupBy == 'daily'">
                DATE(o.regDT) AS date
            </when>
            <when test="groupBy == 'monthly'">
                DATE_FORMAT(o.regDT, '%Y-%m') AS date
            </when>
            <otherwise>
                DATE(o.regDT) AS date  <!-- 기본값으로 일별 설정 -->
            </otherwise>
        </choose>,
        SUM(CASE WHEN p.successYN = 1 AND o.cancelState = 0 THEN o.total_price ELSE 0 END) AS salesAmount,
        COUNT(CASE WHEN p.successYN = 1 AND o.cancelState = 0 THEN o.idx ELSE NULL END) AS orderCount,
        SUM(CASE WHEN o.cancelState = 1 THEN o.total_price ELSE 0 END) AS cancelAmount,
        COUNT(CASE WHEN o.cancelState = 1 THEN o.idx ELSE NULL END) AS cancelCount
        FROM t_order o
        LEFT JOIN t_payment p ON o.idx = p.order_idx
        WHERE o.regDT BETWEEN #{startDate} AND #{endDate}
        GROUP BY
        <choose>
            <when test="groupBy == 'daily'">
                DATE(o.regDT)
            </when>
            <when test="groupBy == 'monthly'">
                DATE_FORMAT(o.regDT, '%Y-%m')
            </when>
            <otherwise>
                DATE(o.regDT)  <!-- 기본값으로 일별 설정 -->
            </otherwise>
        </choose>
        ORDER BY date DESC
    </select>

    <!-- 요일별 구매 내역 상세보기  -->
    <select id="getOrdersByDate" parameterType="string" resultType="MasterVO">
        SELECT
        p.orderid AS orderId,
        p.ordername AS productName,
        p.amount AS paymentAmount,
        u.userid AS userid,
        DATE_FORMAT(p.createDT, '%Y-%m-%d') AS orderDate
        FROM t_payment p
        JOIN t_user u ON p.customerName = u.userid
        WHERE DATE(p.createDT) = #{date}
        ORDER BY p.createDT DESC
    </select>

    <!-- 월별 구매 내역 상세보기 -->
    <select id="getOrdersByMonth" parameterType="string" resultType="MasterVO">
        SELECT
        p.orderid AS orderId,
        p.ordername AS productName,
        p.amount AS paymentAmount,
        u.userid AS userid,
        DATE_FORMAT(p.createDT, '%Y-%m-%d') AS orderDate
        FROM t_payment p
        JOIN t_user u ON p.customerName = u.userid
        WHERE DATE_FORMAT(p.createDT, '%Y-%m') = #{month}
        ORDER BY p.createDT DESC
    </select>

    <!-- 공지사항 총 개수 조회 -->
    <select id="getTotalNoticeCount" resultType="int">
        SELECT COUNT(*) FROM t_notice
    </select>

    <!-- 페이징된 공지사항 목록 조회 -->
    <select id="getNoticeListByPage" parameterType="map" resultType="MasterVO">
        SELECT
        n.idx,
        n.title,
        n.content,
        n.regDT,
        n.modifyDT,
        n.adminidx,
        a.adminid AS adminid
        FROM t_notice n
        LEFT JOIN t_admin a ON n.adminidx = a.idx
        ORDER BY n.regDT DESC
        LIMIT #{startRecord}, #{pageSize}
    </select>

    <!-- 전체 QNA 개수 조회 -->
    <select id="getTotalQnaCount" resultType="int">
        SELECT COUNT(*) FROM t_qna
    </select>

    <!-- 페이징된 QNA 목록 조회 -->
    <select id="getQNAListByPage" parameterType="map" resultType="MasterVO">
        SELECT
        q.idx,
        qt.type AS qnatype,  -- QNA 유형
        q.title,
        q.content,
        u.userid,
        DATE_FORMAT(q.regDT, '%Y-%m-%d') as regDT,
        q.handleState,
        r.reply AS reply,
        q.imgfile1 as attachmentUrl
        FROM t_qna q
        JOIN t_qnatype qt ON q.qnatype = qt.code
        JOIN t_user u ON q.useridx = u.idx  -- 사용자 정보 조인
        LEFT JOIN t_reply r ON q.idx = r.qna_idx
        ORDER BY q.regDT DESC
        LIMIT #{startRecord}, #{pageSize}
    </select>

<!-- comment_idx에 해당하는 댓글 작성자 idx 구하기 -->
    <select id="findUserIdxByCommentIdx" parameterType="int" resultType="int">
        SELECT useridx
        FROM t_comment
        WHERE idx = #{comment_idx}
    </select>

    <!-- 채원 시작 -->
    <!-- 주문 페이지 데이터 띄우기 -->
    <select id="getUserOrderList" resultType="com.ict.finalproject.DTO.CurrentOrderDataDTO">
        SELECT
        o.idx AS order_idx,
        pm.orderId AS orderId,
        pm.createDT AS order_date,
        pm.orderName AS orderName,
        pm.customerName AS customerName,
        pm.amount - SUM(IFNULL(pmc.cancelAmount, 0)) AS amount
        FROM
        T_payment pm
        JOIN
        T_order o ON pm.order_idx = o.idx
        LEFT JOIN
        T_payment_cancel pmc ON pm.payment_id = pmc.payment_id
        WHERE
        o.payState = 1
        AND pm.successYN = 1
        <if test="startDate != null">
            AND pm.createDT &gt;= CONCAT(#{startDate}, ' 00:00:00')
        </if>
        <if test="endDate != null">
            AND pm.createDT &lt;= CONCAT(#{endDate}, ' 23:59:59')
        </if>
        <if test="searchType != null and searchKeyword != null">
            <choose>
                <when test="searchType == 'orderNumber'">
                    AND pm.orderId LIKE CONCAT('%', #{searchKeyword}, '%')  <!-- 주문번호 검색 -->
                </when>
                <when test="searchType == 'customerId'">
                    AND pm.customerName LIKE CONCAT('%', #{searchKeyword}, '%')  <!-- 주문자 아이디 검색 -->
                </when>
            </choose>
        </if>
        GROUP BY
        o.idx, pm.orderId, pm.createDT, pm.orderName, pm.customerName, pm.amount
        ORDER BY regDT DESC
        limit #{pageSize} offset #{offset};
    </select>
    <select id="getTotalOrderListCount">
        SELECT COUNT(DISTINCT o.idx)
        FROM T_order o
        LEFT JOIN T_payment pm ON o.idx = pm.order_idx
        WHERE o.payState = 1
        AND pm.successYN = 1
        <if test="startDate != null">
            AND pm.createDT &gt;= CONCAT(#{startDate}, ' 00:00:00')
        </if>
        <if test="endDate != null">
            AND pm.createDT &lt;= CONCAT(#{endDate}, ' 23:59:59')
        </if>
        <if test="searchType != null and searchKeyword != null">
            <choose>
                <when test="searchType == 'orderNumber'">
                    AND pm.orderId LIKE CONCAT('%', #{searchKeyword}, '%')  <!-- 주문번호 검색 -->
                </when>
                <when test="searchType == 'customerId'">
                    AND pm.customerName LIKE CONCAT('%', #{searchKeyword}, '%')  <!-- 주문자 아이디 검색 -->
                </when>
            </choose>
        </if>
    </select>
    <select id="getStateCount" resultType="com.ict.finalproject.DTO.OrderStateCountDTO">
        SELECT
        SUM(CASE WHEN orderState = 1 THEN 1 ELSE 0 END) AS newOrders,
        SUM(CASE WHEN orderState = 2 THEN 1 ELSE 0 END) AS preparingOrders,
        SUM(CASE WHEN orderState IN(3, 4) THEN 1 ELSE 0 END) AS inTransitOrders,
        SUM(CASE WHEN orderState = 5 THEN 1 ELSE 0 END) AS deliveredOrders,
        SUM(CASE WHEN orderState = 6 THEN 1 ELSE 0 END) AS confirmedOrders,
        SUM(CASE WHEN orderState IN (9, 10, 11, 12, 13, 14) THEN 1 ELSE 0 END) AS exchangeRefundOrders
        FROM T_orderList;
    </select>
    <select id="getDetailInfo" resultType="com.ict.finalproject.DTO.OrderListDTO">
        select o.idx As order_idx, o.trackingNum, o.use_point, o.recipient, o.zipcode, o.addr, o.addrdetail,
        o.tel, o.request_memo, pm.createDT As payDT, pm.paytype, pm.amount, pm.orderId, pm.customerName
        from T_order o
        join T_payment pm ON o.idx = pm.order_idx
        WHERE o.idx=${param1} AND o.payState = 1 AND pm.successYN = 1
    </select>
    <select id="getDetailProducts" resultType="com.ict.finalproject.vo.OrderListVO">
        select ol.idx As idx, ol.order_idx AS order_idx,ol.pro_idx As pro_idx, p.title As title, ol.amount As amount, ol.cancelCount As cancelCount,
        ol.orderState As orderState, ol.order_idx As order_idx, p.price As price
        from T_orderList ol
        join T_product p on ol.pro_idx = p.idx
        where ol.order_idx=${param1} and ol.orderState!=0
    </select>
    <update id="saveTrackingNumber">
        update T_order
        set trackingNum=#{param2}
        where idx=${param1}
    </update>
    <update id="updatedeliOrderState">
        update T_orderList
        set orderState=${param2}
        where order_idx=${param1} and orderState=2
    </update>
    <update id="updateOrderState">
        update T_orderList
        set orderState=${param2}
        where idx=${param1}
    </update>
    <!-- 매출내역 페이지 데이터 띄우기 -->
    <select id="getSalesList" resultType="com.ict.finalproject.DTO.SalesListDTO">
        SELECT
        DATE(pm.createDT) AS orderDate,    -- 주문 일자
        COUNT(DISTINCT o.idx) AS orderCount,        -- 주문 건수
        SUM(pm.amount) - SUM(IFNULL(pmc.totalCancelAmount, 0)) AS totalSales       -- 총 매출
        FROM
        T_payment pm
        JOIN
        T_order o ON pm.order_idx = o.idx
        LEFT JOIN
        (SELECT payment_id, SUM(cancelAmount) AS totalCancelAmount  -- 취소 금액을 그룹화하여 합산
        FROM T_payment_cancel
        GROUP BY payment_id) pmc ON pm.payment_id = pmc.payment_id
        WHERE
        pm.successYN = 1
        AND o.payState = 1
        <if test="startDate != null">
            AND pm.createDT &gt;= CONCAT(#{startDate}, ' 00:00:00')
        </if>
        <if test="endDate != null">
            AND pm.createDT &lt;= CONCAT(#{endDate}, ' 23:59:59')
        </if>
        GROUP BY
        DATE(pm.createDT)
        ORDER BY
        orderDate desc
        limit #{pageSize} offset #{offset}
    </select>
    <select id="getTotalSalesListCount">
        SELECT
        COUNT(DISTINCT DATE(pm.createDT)) AS totalCount   -- 날짜별로 매출이 기록된 날짜의 수를 셈
        FROM
        T_payment pm
        JOIN
        T_order o ON pm.order_idx = o.idx
        WHERE
        pm.successYN = 1
        AND o.payState = 1
        <if test="startDate != null">
            AND pm.createDT &gt;= CONCAT(#{startDate}, ' 00:00:00')
        </if>
        <if test="endDate != null">
            AND pm.createDT &lt;= CONCAT(#{endDate}, ' 23:59:59')
        </if>
    </select>
    <select id="getSalesDetailList" resultType="com.ict.finalproject.DTO.CurrentOrderDataDTO">
        SELECT
        o.idx AS order_idx,
        pm.orderId AS orderId,
        pm.orderName AS orderName,
        pm.customerName AS customerName,
        pm.amount - SUM(IFNULL(pmc.cancelAmount, 0)) AS amount
        FROM
        T_payment pm
        JOIN
        T_order o ON pm.order_idx = o.idx
        LEFT JOIN
        T_payment_cancel pmc ON pm.payment_id = pmc.payment_id
        WHERE
        o.payState = 1
        AND pm.successYN = 1
        AND DATE(pm.createDT) = #{orderDate}
        GROUP BY
        o.idx, pm.orderId, pm.createDT, pm.orderName, pm.customerName, pm.amount
        ORDER BY regDT DESC
        limit #{pageSize} offset #{offset};
    </select>

    <select id="getTotalSalesDetailListCount">
        SELECT COUNT(DISTINCT o.idx)
        FROM T_order o
        LEFT JOIN T_payment pm ON o.idx = pm.order_idx
        WHERE o.payState = 1
        AND pm.successYN = 1
        AND DATE(pm.createDT) = #{orderDate}
    </select>
    <select id="getMonthlySales" resultType="com.ict.finalproject.DTO.SalesListDTO">
        SELECT
        months.month AS orderDate,
        IFNULL(SUM(pm.amount) - SUM(IFNULL(pmc.totalCancelAmount, 0)), 0) AS totalSales
        FROM
        (SELECT 1 AS month UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
        UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7
        UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10
        UNION ALL SELECT 11 UNION ALL SELECT 12) months
        LEFT JOIN
        T_payment pm ON MONTH(pm.createDT) = months.month AND YEAR(pm.createDT) = YEAR(CURDATE())
        LEFT JOIN
        T_order o ON pm.order_idx = o.idx
        LEFT JOIN
        (SELECT payment_id, SUM(cancelAmount) AS totalCancelAmount
        FROM T_payment_cancel
        GROUP BY payment_id) pmc ON pm.payment_id = pmc.payment_id
        WHERE
        (pm.payment_id IS NULL OR (pm.successYN = 1 AND o.payState = 1))
        GROUP BY
        months.month
        ORDER BY
        months.month
    </select>
    <select id="getDailySales" resultType="com.ict.finalproject.DTO.SalesListDTO">
        SELECT
        date_table.date AS orderDate,
        IFNULL(SUM(pm.amount) - SUM(IFNULL(pmc.totalCancelAmount, 0)), 0) AS totalSales
        FROM
        (SELECT
        DATE_SUB(CURDATE(), INTERVAL (WEEKDAY(CURDATE()) - idx) DAY) AS date
        FROM
        (SELECT 0 AS idx UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3
        UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6) AS idx_table
        ) AS date_table
        LEFT JOIN
        T_payment pm ON DATE(pm.createDT) = date_table.date
        LEFT JOIN
        T_order o ON pm.order_idx = o.idx
        LEFT JOIN
        (SELECT payment_id, SUM(cancelAmount) AS totalCancelAmount
        FROM T_payment_cancel
        GROUP BY payment_id) pmc ON pm.payment_id = pmc.payment_id
        WHERE
        (pm.payment_id IS NULL OR (pm.successYN = 1 AND o.payState = 1))
        GROUP BY
        date_table.date
        ORDER BY
        date_table.date
    </select>
    <select id="getAniSales" resultType="com.ict.finalproject.DTO.SalesListDTO">
        SELECT
        p.ani_title AS aniTitle,
        SUM((ol.amount - IFNULL(ol.cancelCount, 0)) * p.price) AS totalSales
        FROM
        T_payment pm
        JOIN
        T_order o ON pm.order_idx = o.idx
        JOIN
        T_orderList ol ON o.idx = ol.order_idx
        JOIN
        T_product p ON ol.pro_idx = p.idx
        LEFT JOIN
        (SELECT payment_id, SUM(cancelAmount) AS totalCancelAmount
        FROM T_payment_cancel
        GROUP BY payment_id) c ON pm.payment_id = c.payment_id
        WHERE
        pm.successYN = 1
        AND o.payState = 1
        GROUP BY
        p.ani_title
        ORDER BY
        totalSales DESC
    </select>
    <select id="getCategorySales" resultType="com.ict.finalproject.DTO.SalesListDTO">
        SELECT
        p.category AS category,
        SUM((ol.amount - IFNULL(ol.cancelCount, 0)) * p.price) AS totalSales
        FROM
        T_payment pm
        JOIN
        T_order o ON pm.order_idx = o.idx
        JOIN
        T_orderList ol ON o.idx = ol.order_idx
        JOIN
        T_product p ON ol.pro_idx = p.idx
        LEFT JOIN
        (SELECT payment_id, SUM(cancelAmount) AS totalCancelAmount
        FROM T_payment_cancel
        GROUP BY payment_id) c ON pm.payment_id = c.payment_id
        WHERE
        pm.successYN = 1
        AND o.payState = 1
        GROUP BY
        p.category
        ORDER BY
        totalSales DESC
    </select>
</mapper>
